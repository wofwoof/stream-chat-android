import io.getstream.chat.android.Configuration

// Create variables with empty default values
ext["snapshot"] = ''

if (snapshot) {
    ext["rootVersionName"] = Configuration.snapshotVersionName
} else {
    ext["rootVersionName"] = Configuration.versionName
}

def hasSigningKey = project.hasProperty("signingKeyId") || project.hasProperty("signingKey")
if(hasSigningKey) {
    sign(project)
}
void sign(Project project) {
    project.signing {
        required { project.gradle.taskGraph.hasTask("publish") }
        def signingKeyId = project.findProperty("signingKeyId")
        def signingKey = project.findProperty("signingKey")
        def signingPassword = project.findProperty("signingPassword")
        if (signingKeyId) {
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        } else if (signingKey) {
            useInMemoryPgpKeys(signingKey, signingPassword)
        }
        sign publishing.publications
    }
}

// Set up Sonatype repository
nexusPublishing {
    repositories {
        //sonatype()
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
            packageGroup = "io.gitcoins"
            stagingProfileId = System.getenv('SONATYPE_STAGING_PROFILE_ID')
            username =  System.getenv('ORG_GRADLE_PROJECT_sonatypeUsername')
            password =  System.getenv('ORG_GRADLE_PROJECT_sonatypePassword')
        }
    }

    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

publishing {
    repositories {
        maven {
            name = "local"

            def releasesRepoUrl = layout.buildDirectory.dir('repos/releases')
            def snapshotsRepoUrl = layout.buildDirectory.dir('repos/snapshots')
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

        }
    }
}

tasks.withType(dokkaHtmlMultiModule.getClass()) {
    includes.from("DokkaRoot.md")
}
