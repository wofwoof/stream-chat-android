import io.getstream.chat.android.Configuration

// Create variables with empty default values
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["sonatypeStagingProfileId"] = ''
ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.key"] = ''
ext["snapshot"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    // Read local.properties file first if it exists
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
} else {
    // Use system environment variables
    ext["ossrhUsername"] = System.getenv('OSSRH_TOKEN_USERNAME')
    ext["ossrhPassword"] = System.getenv('OSSRH_TOKEN_PASSWORD')
    ext["sonatypeStagingProfileId"] = System.getenv('SONATYPE_STAGING_PROFILE_ID')
    ext["signing.keyId"] = System.getenv('SIGNING_KEY_ID')
    ext["signing.password"] = System.getenv('SIGNING_PASSWORD')
    ext["signing.key"] = System.getenv('SIGNING_KEY')
    ext["snapshot"] = System.getenv('SNAPSHOT')
}

if (snapshot) {
    ext["rootVersionName"] = Configuration.snapshotVersionName
} else {
    ext["rootVersionName"] = Configuration.versionName
}

// The following makes the key available for publishing to Nexus
// export ORG_GRADLE_PROJECT_sonatypeUsername=${token name}
// export ORG_GRADLE_PROJECT_sonatypePassword=${token password}
// After making the Gradle properties above available, you can try publish using
// ./gradlew publishToSonatype
// ./gradlew publishToSonatype closeAndReleaseSonatypeStagingRepository

nexusPublishing {
    repositories {
        //sonatype()
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))

            version = rootVersionName
            stagingProfileId = sonatypeStagingProfileId
            username = ossrhUsername
            password = ossrhPassword
        }
    }

    // these are not strictly required. The default timeouts are set to 1 minute. But Sonatype can be really slow.
    // If you get the error "java.net.SocketTimeoutException: timeout", these lines will help.
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

tasks.withType(dokkaHtmlMultiModule.getClass()) {
    includes.from("DokkaRoot.md")
}
